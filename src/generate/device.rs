use crate::svd::Device;
use anyhow::Result;

use proc_macro2::TokenStream;
use quote::quote;

use crate::generate::interrupt;
use crate::util;

use log::info;

pub fn render(d: &Device, device_x: &mut String) -> Result<TokenStream> {
    let mut out = TokenStream::new();

    let doc = format!(
        "Peripheral access API for {0} microcontrollers \
         (generated using svd2mmio-ll-rs v{1})\n\n\
         You can find an overview of the generated API [here].\n\n\
         API features to be included in the [next] svd2mmio-ll-rs \
         release can be generated by cloning the svd2mmio-ll-rs [repository], \
         checking out the above commit, and running `cargo doc --open`.\n\n\
         [here]: https://docs.rs/svd2mmio-ll-rs/{1}/svd2mmio-ll-rs/#peripheral-api\n\
         [next]: https://github.com/no111u3/svd2mmio-ll-rs/blob/master/CHANGELOG.md#unreleased\n\
         [repository]: https://github.com/no111u3/svd2mmio-ll-rs",
        d.name.to_uppercase(),
        env!("CARGO_PKG_VERSION")
    );

    out.extend(quote! {
        #![doc = #doc]
        // Deny a subset of warnings
        #![deny(const_err)]
        #![deny(dead_code)]
        #![deny(improper_ctypes)]
        #![deny(missing_docs)]
        #![deny(no_mangle_generic_items)]
        #![deny(non_shorthand_field_patterns)]
        #![deny(overflowing_literals)]
        #![deny(path_statements)]
        #![deny(patterns_in_fns_without_body)]
        #![deny(private_in_public)]
        #![deny(unconditional_recursion)]
        #![deny(unused_allocation)]
        #![deny(unused_comparisons)]
        #![deny(unused_parens)]
        #![deny(while_true)]
        // Explicitly allow a few warnings that may be verbose
        #![allow(non_camel_case_types)]
        #![allow(non_snake_case)]
        #![no_std]
    });

    out.extend(quote! {
        use core::ops::Deref;
        use core::marker::PhantomData;
    });

    // Retaining the previous assumption
    let mut fpu_present = true;

    if let Some(cpu) = d.cpu.as_ref() {
        let bits = util::unsuffixed(u64::from(cpu.nvic_priority_bits));

        out.extend(quote! {
            ///Number available in the NVIC for configuring priority
            pub const NVIC_PRIO_BITS: u8 = #bits;
        });

        fpu_present = cpu.fpu_present;
    }

    info!(
        "CPU {} FPU",
        if fpu_present { "has" } else { "does not have" }
    );

    out.extend(interrupt::render(&d.peripherals, device_x)?);

    Ok(out)
}
